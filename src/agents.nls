__includes ["determine_route.nls" "decide_add_bus.nls" "messaging.nls" "helper.nls" ]

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".

  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; local variables
  add_buses       ; if true, add buses
  levels          ; hyperparameter for the depth of the graph
  known_route     ; Assessed route for this bus (with respect to levels hyperparam)
  dropoff_intent  ; ID's of the passengers for which this bus has plans
  pickup_intent   ; ID's of the passengers to pick up
  has_plan        ; ID's of passengers for which another bus already has a plan, passengers that don't need to be picked up by you. list of lists. list per bus stop
  dropped_off     ; ID's of the passengers that have been dropped of since the last sent message
  planless_hist   ; The history of how many passengers were planless up to some amount of ticks in the past
  distance_mat    ; a matrix containing the shortest distance from one bus stop to the other (also considering paths that are not directly connected)
  night_team      ; a list of buses to be added at 0:00
  morning_team    ; a list of buses to be added at 6:00
  bid             ; a boolean signifying whether we are working with bids or not

  total_ticks_per_day
  planless_threshold ; The amount of unaccounted-for passengers above which we decide to add a new bus
  need_thresh_1      ; The angle of growth of unaccounted-for passengers above which we decide to add a bus of type 1
  need_thresh_2      ; The angle of growth of unaccounted-for passengers above which we decide to add a bus of type 2
  need_thresh_3      ; The angle of growth of unaccounted-for passengers above which we decide to add a bus of type 3
]


globals [
  graph
]


to init-buses
  ; Initialize Agents

  ; This list contains the topology of the entire network of bus stops, which is known to all
  ; agents. This can be used to calculate the shortest path between two bus stops.
  set graph [ [22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13]
              [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18]
              [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]
  ]

  ; graph for the test-case
  set graph [ []
              [2]
              [1 3 4]
              [2 5]
              [2]
              [3 6 7]
              [5]
              [5]
              [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] ]

  ; hyperparameters of the algorithm
  set levels 3
  set total_ticks_per_day 1440
  set planless_threshold 100
  set need_thresh_1 0.0
  set need_thresh_2 2.0
  set need_thresh_3 5.0
  set bid false

  ; initialisation of bus-own variables
  set dropped_off []
  set pickup_intent []
  set planless_hist n-values 10 [0]
  set known_route []
  set has_plan n-values 24 [ ["empty" ] ]
  set has_plan [ ["empty"] ["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"]["empty"] ]
  set dropoff_intent [[]]
  set dropped_off []

  ; distance mat for test-case
  let row n-values 24 [ random 3 ]
  set distance_mat n-values 24 [ row ]

  ; show "distance_mat is set to test_case"
  set distance_mat replace-item 1 distance_mat [1 0 2 4 4 6 8 8 ]
  set distance_mat replace-item 2 distance_mat [1 2 0 2 2 4 6 6 ]
  set distance_mat replace-item 3 distance_mat [1 4 2 0 4 2 4 4 ]
  set distance_mat replace-item 4 distance_mat [1 4 2 4 0 6 8 8 ]
  set distance_mat replace-item 5 distance_mat [1 6 4 2 6 0 2 2 ]
  set distance_mat replace-item 6 distance_mat [1 8 6 4 8 2 0 4 ]
  set distance_mat replace-item 7 distance_mat [1 8 6 4 8 2 4 0 ]

  ; init bus-teams
  set night_team [ 1 2 3 ]
  set morning_team [ 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 ]

end

to execute-actions

  show get-passengers-at-stop 3

  ; decide whether to add a new bus this tick
  decide_add_bus

  ; handle whether this bus wants a route or is the oracle and must give a route
  communication

  if current_stop > -1 [ ; if the bus is at a stop

    ; drop off
    foreach item 0 dropoff_intent [
      drop-off-passenger ?
    ]
    set dropoff_intent but-first dropoff_intent

    let picked_up []
    let passengers_at_stop get-passengers-at-stop current_stop

    ; pick up passengers
    foreach pickup_intent [
      if member? ? slice 0 passengers_at_stop [
        pick-up-passenger ?
        set picked_up lput ? picked_up
      ]
    ]
    ; remove picked up passengers
    foreach picked_up [
      set pickup_intent remove ? pickup_intent
    ]

    ; follow route
    set next_stop item 0 known_route
    set known_route but-first known_route  ; remove the first element of the known_route
  ]

  travel-to next_stop

end

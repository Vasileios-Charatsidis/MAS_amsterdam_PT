

to add_fixed_buses
  if bus_id = 24 [
  ; at 0:00 add the 'night team'
    if length night_team > 0 [ ; add some busses at 6:00, one every tick
      add-bus item 0 night_team
      set night_team but-first night_team
    ]

    ; at 6:00 add the 'morning team'
    if ticks > 360 and length morning_team > 0 [ ; add some busses at 6:00, one every tick
      add-bus item 0 morning_team
      set morning_team but-first morning_team
    ]
  ]

end


to decide_start_vote
  ; Only oracle can decide to add buses to system

  if bus_id = 24 [

    ; decide whether to add a bus based on how much capacity there is in the world
    ; and how many people we estimate are in the world. Assume full buses.
    let decision_ratio (total_capacity / (total_capacity + total_passenger_count))

    if decision_ratio < add_bus_threshold and tick_of_vote != (ticks - 1) and second_opinion [
      request_vote
    ]

    if decision_ratio < add_bus_threshold and not second_opinion [
      oracle_adds_bus
    ]

    ; keep track of growth history to help decide what size bus to add in the future
    set history lput decision_ratio but-first history
  ]

end


to oracle_adds_bus
  ; if we need to add a bus, determine what size

  let need new_bus_need
  if need < need_thresh_1 [
    ifelse need < need_thresh_2 [
      ifelse need < need_thresh_3 [
        add-bus 3
        set total_capacity total_capacity + 150
      ][
        add-bus 2
        set total_capacity total_capacity + 60
      ]
    ][
      add-bus 1
      set total_capacity total_capacity + 12
    ]

    set total_buses (total_buses + 1)
  ]

end


to-report get_second_opinion [ free-spaces ]
  ; this function should only be called by the oracle

  ; determine if we still need to add a new bus based on the buses' second opinion
  let decision_ratio (total_capacity / (total_capacity - free-spaces + total_passenger_count))

  let to_add False
  if decision_ratio < add_bus_threshold [
    set to_add True
  ]

  report to_add
end


to-report new_bus_need
  ; the need for a bus is determined by how steeply the amount of planless passengers increased in the past few ticks
  ; also influenced by the time of day, later in the day we'll be more hesitant to buy new busses

  let discounted 0 ; the factor with which we want to multiply need at the end of the day
  let angle linear_fit history
  let time_factor 1 - (( ( 1 - discounted ) * ticks ) / total_ticks_per_day )
  report angle * time_factor
end


to-report compute_route_to_destination
  ; call nw:path-to from current_stop to busiest_stop

  let from_location current_stop

  if from_location = -1 [
    set from_location next_stop
  ]

  let route_list 0
  let route_list2 []

  let b busiest_stop
  ask bus_stop from_location [set route_list nw:path-to bus_stop b]
  foreach route_list [
    ask ? [
      let temp parse_route (word self)  ; contains required info
      set route_list2 lput temp route_list2
    ]
  ]

  report route_from_nw_list route_list2 from_location

end


to-report get_global_business_extrema
  ; reports a list of the id's of the busiest and the calmest station in the system and their respective business
  ; global business of a station is defined as the average of its own business and it's neighboring stations' business
  ;
  ; return_list like [ [ bus_stop_id max_business ]
  ;                    [ bus_stop_id min_business ] ]

  let businesses compute_business_stops

  ; get extrema
  let max_business max businesses
  let min_business min businesses
  let max_idx position max_business businesses
  let min_idx position min_business businesses

  ; prepare return_list
  report ( list ( list max_idx max_business ) ( list min_idx min_business ) )
end


to-report get_next_stop
  ; From the current bus stop, choose the next bus stop to visit
  ; Currently we choose the bus stop with the maximum number of passengers
  ; return:
  ;  @ next_stop

  ; Get the connecting nodes of the current bus stop
  let connecting_nodes item current_stop graph

  let utilities []
  let max_utility -1000000

  ; 10 percent randomeness added. If 1, then the next stop will be randomly chosen
  let random_route [0 0 0 0 0 0 0 0 0 1]
  let r_idx random length random_route

  if (item r_idx random_route = 1) [
    let random_next_node random length connecting_nodes
    report item random_next_node connecting_nodes
  ]

  foreach connecting_nodes [
    ; Get the utility for each of the connecting nodes
    let u utility ?

    if u > max_utility [
      set max_utility u
    ]

    set utilities lput u utilities
  ]

  ; Get list of max_utilities. If there are multiple stations with the same
  ; utility, then randomly choose one of those stations
  let max_utility_indices []
  let index 0

  foreach utilities [
    if ? = max_utility [
      set max_utility_indices lput index max_utility_indices
    ]
    set index index + 1
  ]

  let select_node item random length max_utility_indices max_utility_indices

  report item select_node connecting_nodes

end


to dropoff_passengers

  foreach bus_passengers [
    ifelse item 1 ? = current_stop [
      drop-off-passenger item 0 ?
    ] [
      ; drop off if negative help
      let h help ? current_stop next_stop

      if h < 0 [
        drop-off-passenger item 0 ?
      ]
    ]
  ]

end


to pickup_passengers

  let free_spaces bus_capacity bus_type - (length bus_passengers)
  let passengers_at_stop get-passengers-at-stop current_stop

  ; Only pickup free_spaces number of passengers
  repeat min list free_spaces length passengers_at_stop [

    let r_passenger item random length passengers_at_stop passengers_at_stop
    let h help r_passenger current_stop next_stop

    if h > 0 [
        pick-up-passenger item 0 r_passenger
        set free_spaces (free_spaces - 1)
    ]
  ]

end

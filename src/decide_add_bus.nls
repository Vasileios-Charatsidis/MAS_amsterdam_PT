; This file contains all functions on adding new buses
; This is an include-file to agents.nls.
;
; All the variables in buses-own and globals can be accessed here
;
; Buses are added when the amount of unaccounted-for people on the map grows too large
; The available information and the heuristic for decision are the same for all buses
; Therefore only one bus, bus 24, can make all the decisions to ensure the global goal
;
; at 0:00, a 'night-team' of buses is added
; at 6:00, a 'morning-team' of buses is added


;TODO

; need to update has_plan otherwise negatives
;

to decide_add_bus
  if bus_id = 24 [ ; bus 24 is the 'president bus'
    
    ; at 0:00 add the 'night team'
    if length night_team > 0 [ ; add some busses at 6:00, one every tick
      add-bus item 0 night_team
      set night_team but-first night_team
    ]
    
    ; at 6:00 add the 'morning team'
    if ticks > 360 and length morning_team > 0 [ ; add some busses at 6:00, one every tick
      add-bus item 0 morning_team
      set morning_team but-first morning_team
    ]

    ; count the amount of unaccounted-for passengers and total passengers
    let decision False
    let total_waiting 0
    let num_stations length graph - 1
    let stations n-values num_stations [?]

    foreach stations [
      if length get-passengers-at-stop ? > 0 [
        set total_waiting total_waiting + length get-passengers-at-stop ?
      ]
    ]
    let total_accounted length has_plan

    ; determine unaccounted-for passengers
    let planless total_accounted / (total_waiting + total_accounted)
    
;    show ( word "total waiting " total_waiting )
;    show ( word "total accounted " total_accounted )
;    show ( word "total planless " planless )
;    show " "

    ; keep track of growth of unaccounted-for people to help decide what size bus to add
    set planless_hist lput planless but-first planless_hist
    

    ; if we need to add a bus, determine what size
    if planless < planless_threshold [
      ;show  (word "planless fraction " planless)
      let need new_bus_need planless_hist
      ;show (word "need param" need)
      if need > need_thresh_1 [
        ifelse need > need_thresh_2 [
          ifelse need > need_thresh_3 [
            add-bus 3
          ][
            add-bus 2
          ]
        ][
          add-bus 1
        ]
      ]
    ]
  ]
end

to-report new_bus_need [ history ]
  ; the need for a bus is determined by how steeply the amount of planless passengers increased in the past few ticks
  ; also influenced by the time of day, later in the day we'll be more hesitant to buy new busses

  let discounted .8 ; the factor with which we want to multiply need at the end of the day
  let angle linear_fit history
  let time_factor 1 - (( ( 1 - discounted ) * ticks) / total_ticks_per_day )
  report angle * time_factor
end

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".

  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; local variables
  adding          ; add bus if adding is 0
  cur_stop        ; current stop index
  routing
]


globals [
  graph
]


to init-buses
  ; Initialize Agents

  ; Define routes to agents
  if bus_id = 24 [ set routing [ 3 9 8 6 8 2 8 9 3 ] ]
  if bus_id = 25 [ set routing [ 3 4 20 12 15 18 15 12 20 4 ] ]
  if bus_id = 26 [ set routing [ 3 4 10 21 22 0 14 23 19 23 13 22 21 10 4 ] ]
  if bus_id = 27 [ set routing [ 3 16 11 17 7 1 7 17 11 16 ] ]

  ; This list contains the topology of the entire network of bus stops, which is known to all
  ; agents. This can be used to calculate the shortest path between two bus stops.
  set graph [ [22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13]
              [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18]
              [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]
  ]

end


to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.

  if adding = 0 [
   if bus_id = 24 or bus_id = 25 or bus_id = 26  [
     add-bus 1 set adding 1
   ]
  ]

  ifelse current_stop > -1 [

    show "---------------------------------"
    show word "Current stop: " current_stop

    let pass_at_destination filter [ item 1 ? = current_stop ] bus_passengers
    let pass_id_at_destination map [ item 0 ? ] pass_at_destination

    show word "Passengers that have now reached their destination: " pass_id_at_destination

    foreach pass_id_at_destination [ drop-off-passenger ? ]

    show word "Passengers waiting at this stop and their destination: " get-passengers-at-stop current_stop

    let pass_here map [ item 0 ? ] get-passengers-at-stop current_stop

    foreach pass_here [ pick-up-passenger ? ]

    show word "Passengers that are now on the bus: " bus_passengers
    show word "Bus stops we can get to from here: " item current_stop graph  ; note to self: is this how graph works?

    ; check if passenger is on route otherwise take other bus.
    change-passenger-destination-to-centraal

    set cur_stop cur_stop + 1
    if cur_stop = length routing [ set cur_stop 0 ]
    travel-to item cur_stop routing

    show word "Next stop: " next_stop

  ]
  [ travel-to next_stop ]

end


to change-passenger-destination-to-centraal
  ; If the picked up passenger's destination is not on the bus-route,
  ; then drop off the passenger at centraal station

  ; TODO: Revisit this. There should be a smarter way.
  let temp_list []

  foreach bus_passengers [
    let temp_passenger ?
    let pos1 position item 1 temp_passenger routing

    ; show word "routing: " routing
    ; show word "position: " pos1

    if (is-boolean? pos1) and (not pos1) [
      set temp_passenger replace-item 1 temp_passenger 3  ; drop the passenger at Centraal station
    ]

    set temp_list lput temp_passenger temp_list
  ]
  set bus_passengers temp_list

end
